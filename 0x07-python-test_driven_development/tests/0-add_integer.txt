# test to check if the function add_integer can add 2 integers or convert floats to add them

>>> add_integer = __import__('0-add_integer').add_integer

>>> add_integer(1, 2)
3

>>> add_integer(100, -2)
98

>>> add_integer(2)
100

>>> add_integer(100.3, -2)
98

>>> add_integer((1))
99

>>> add_integer(1, (2))
3

# string check
>>> add_integer(3, 'b')
Traceback (most recent call last):
TypeError: b must be an integer

# string check
>>> add_integer('a', 3)
Traceback (most recent call last):
TypeError: a must be an integer

# None check
>>> add_integer(None)
Traceback (most recent call last):
TypeError: a must be an integer

# List check
>>> add_integer([1, 2, 3], 1)
Traceback (most recent call last):
TypeError: a must be an integer

# List check
>>> add_integer(1, [1, 2, 3])
Traceback (most recent call last):
TypeError: b must be an integer

# Empty list check
>>> add_integer([], 1)
Traceback (most recent call last):
TypeError: a must be an integer

# Empty list check
>>> add_integer(1, [])
Traceback (most recent call last):
TypeError: b must be an integer

# Tupple check
>>> add_integer((1,), 1)
Traceback (most recent call last):
TypeError: a must be an integer

# Tupple check
>>> add_integer(1, (1,))
Traceback (most recent call last):
TypeError: b must be an integer

# Empty dictionary check
>>> add_integer({}, 1)
Traceback (most recent call last):
TypeError: a must be an integer

# Dictionary check
>>> add_integer(1, {'a':1})
Traceback (most recent call last):
TypeError: b must be an integer

# NaN (none) check
>>> add_integer(float("NaN"))
Traceback (most recent call last):
ValueError: cannot convert float NaN to integer

# Float overflow
>>> add_integer(float("inf"))
Traceback (most recent call last):
OverflowError: cannot convert float infinity to integer
